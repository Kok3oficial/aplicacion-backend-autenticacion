# Aplicación Backend con Autenticación y CRUD de Videojuegos

Este proyecto es una aplicación backend que gestiona la autenticación de usuarios y permite la gestión de productos (videojuegos) a través de operaciones CRUD. Está construida utilizando Node.js, Express.js, MongoDB, y JWT (JSON Web Tokens) para la autenticación.

## Requisitos

- Node.js
- MongoDB (MongoDB Atlas o una instalación local)
- Postman o Thunder Client para probar las APIs

## Instalación

1. Clona el repositorio:

   ```bash
   git clone https://github.com/Kok3oficial/aplicacion-backend-autenticacion.git```

2. Navega al directorio del proyecto:

bash
```
cd aplicacion-backend-autenticacion```
3. Instala las dependencias:

bash

```npm install```

4. Crea un archivo .env en la raíz del proyecto y configura las siguientes variables de entorno:

bash
```
PORT=3000
MONGO_URI=<tu-URI-de-MongoDB>
JWT_SECRET=<tu-secreto-JWT>```

## Uso
1. Inicia el servidor:

bash
```
npm start```
El servidor debería estar corriendo en http://localhost:3000.

Endpoints
Autenticación de Usuario
Registrar un usuario

Método: POST

Endpoint: /api/user/register

Descripción: Permite a un usuario registrarse en la plataforma.

Ejemplo de Body:

json```

{
  "nombre": "John Doe",
  "correo": "johndoe@example.com",
  "password": "password123"
}
```

Iniciar sesión

Método: POST

Endpoint: /api/user/login

Descripción: Permite a un usuario iniciar sesión.

Ejemplo de Body:

json```
Copiar código
{
  "correo": "johndoe@example.com",
  "password": "password123"
}```
Verificar Token

Método: GET
Endpoint: /api/user/verifytoken
Descripción: Verifica la validez de un token JWT.
Actualizar Información del Usuario

Método: PUT

Endpoint: /api/user/update

Descripción: Actualiza la información del usuario.

Ejemplo de Body:

json```
Copiar código
{
  "nombre": "John Doe",
  "correo": "johndoe@example.com",
  "password": "newpassword123"
}```
Gestión de Productos (Videojuegos)
Crear un videojuego

Método: POST

Endpoint: /api/product/create

Descripción: Agrega un nuevo videojuego al catálogo.

Ejemplo de Body:

json```
Copiar código
{
  "nombre": "The Legend of Zelda",
  "descripcion": "Aventura y exploración en un mundo abierto",
  "precio": 59.99
}```
Leer todos los videojuegos

Método: GET
Endpoint: /api/product/readall
Descripción: Obtiene una lista de todos los videojuegos.
Leer un videojuego específico

Método: GET
Endpoint: /api/product/readone/:id
Descripción: Obtiene los detalles de un videojuego específico por ID.
Actualizar un videojuego

Método: PUT

Endpoint: /api/product/update/:id

Descripción: Actualiza los detalles de un videojuego.

Ejemplo de Body:

json```
Copiar código
{
  "nombre": "Super Mario Odyssey",
  "descripcion": "Un juego de plataformas en 3D con Mario",
  "precio": 49.99
}```

Eliminar un videojuego

Método: DELETE
Endpoint: /api/product/delete/:id
Descripción: Elimina un videojuego del catálogo.

Estructura del Proyecto.
```
├── .env
├── .gitignore
├── README.md
├── controllers
│   ├── userController.js
│   └── productController.js
├── models
│   ├── userModel.js
│   └── productModel.js
├── routes
│   ├── userRoutes.js
│   └── productRoutes.js
└── server.js```

Tecnologías Utilizadas

Node.js
Express.js
MongoDB
Mongoose
JWT (JSON Web Tokens)
CORS
dotenv
Despliegue
El proyecto se puede desplegar en Render y se puede utilizar MongoDB Atlas como base de datos en la nube.